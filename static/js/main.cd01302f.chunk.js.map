{"version":3,"sources":["utils.ts","components/Input/index.tsx","components/ExchangeRow/index.tsx","components/SelectRow/index.tsx","App.tsx","index.tsx"],"names":["changeInputHelper","firstCurrentValue","secondCurrentValue","targetValue","value","сalculating","Number","rate","changeListHelper","сurrentValue","currentRate","addition","tag","first","second","third","toFixed","getRates","a","fetch","json","response","Valute","RUB","currencies","rates","Object","values","forEach","item","CharCode","Value","Nominal","Input","name","onChange","className","e","type","ExchangeRow","currentValueLeft","currentValueRight","SelectRow","allRates","leftTag","rightTag","options","keys","map","current","index","App","useState","setLeftValue","setRightValue","setRates","useEffect","then","result","setStateHelper","rightValue","leftValue","target","test","href","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd01302f.chunk.js","sourcesContent":["import {\r\n  ChangeInputFunc,\r\n  ChangeListFunc,\r\n  CalculatingFunc,\r\n  AllRates,\r\n  Currencies,\r\n  DigitCheckingFunc,\r\n} from \"declaration\";\r\n\r\nexport const digitChecking: DigitCheckingFunc = function (value) {\r\n  const rep = /(\\d+|\\.)$/;\r\n  return rep.test(value) || value === \"\" ? value : null;\r\n};\r\n\r\nexport const changeInputHelper: ChangeInputFunc = function (\r\n  firstCurrentValue,\r\n  secondCurrentValue,\r\n  targetValue\r\n) {\r\n  firstCurrentValue.value = сalculating(\r\n    Number(targetValue),\r\n    secondCurrentValue.rate,\r\n    firstCurrentValue.rate\r\n  );\r\n  secondCurrentValue.value = targetValue;\r\n};\r\n\r\nexport const changeListHelper: ChangeListFunc = function (\r\n  сurrentValue,\r\n  currentRate,\r\n  targetValue,\r\n  addition\r\n) {\r\n  сurrentValue.tag = targetValue;\r\n  сurrentValue.rate = currentRate;\r\n  сurrentValue.value =\r\n    typeof addition !== \"undefined\"\r\n      ? сalculating(Number(addition.value), addition.rate, currentRate)\r\n      : сurrentValue.value;\r\n};\r\n\r\nexport const сalculating: CalculatingFunc = function (first, second, third) {\r\n  const calculatedValue = (first * second) / third;\r\n  return Number(calculatedValue.toFixed(3));\r\n};\r\n\r\nexport const getRates = async (): Promise<AllRates> => {\r\n  const response = await (\r\n    await fetch(\"https://www.cbr-xml-daily.ru/daily_json.js\")\r\n  ).json();\r\n  const [currencies, rates]: [Currencies, AllRates] = [\r\n    response.Valute,\r\n    { RUB: 1 },\r\n  ];\r\n  Object.values(currencies).forEach((item) => {\r\n    rates[item.CharCode] = item.Value / item.Nominal;\r\n  });\r\n  return rates;\r\n};\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { InputProps } from \"declaration\";\r\n\r\nexport default function Input({\r\n  name,\r\n  value,\r\n  onChange,\r\n  tag,\r\n}: InputProps): React.ReactElement {\r\n  return (\r\n    <div className=\"flexBox\">\r\n      <input\r\n        name={name}\r\n        value={value}\r\n        onChange={(e) => onChange(e)}\r\n        className=\"text\"\r\n        type=\"text\"\r\n      />\r\n      <div>{tag}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Input from \"components/Input\";\r\nimport { ExchangeRowProps } from \"declaration\";\r\n\r\nexport default function ExchangeRow({\r\n  currentValueLeft,\r\n  currentValueRight,\r\n  onChange,\r\n}: ExchangeRowProps): React.ReactElement {\r\n  return (\r\n    <div className=\"flexRow\">\r\n      <Input\r\n        value={currentValueLeft.value}\r\n        tag={currentValueLeft.tag}\r\n        name=\"left\"\r\n        onChange={onChange}\r\n      />\r\n      ==\r\n      <Input\r\n        value={currentValueRight.value}\r\n        tag={currentValueRight.tag}\r\n        name=\"right\"\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { SelectRowProps } from \"declaration\";\r\nexport default function SelectRow({\r\n  allRates,\r\n  onChange,\r\n  leftTag,\r\n  rightTag,\r\n}: SelectRowProps): React.ReactElement {\r\n  const options = Object.keys(allRates).map((current, index) => {\r\n    return (\r\n      <option key={index} value={current}>\r\n        {current}\r\n      </option>\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"flexRow\">\r\n      Вы переводите из\r\n      <select name=\"left\" onChange={(e) => onChange(e)} value={leftTag}>\r\n        {options}\r\n      </select>\r\n      в\r\n      <select name=\"right\" onChange={(e) => onChange(e)} value={rightTag}>\r\n        {options}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  digitChecking,\n  changeInputHelper,\n  changeListHelper,\n  сalculating,\n  getRates,\n} from \"utils\";\nimport ExchangeRow from \"components/ExchangeRow\";\nimport SelectRow from \"components/SelectRow\";\nimport { CurrentValue, AllRates, SetStateHelperFunc } from \"declaration\";\n\nexport default function App(): React.ReactElement {\n  const [currentValueLeft, setLeftValue] = useState<CurrentValue>({\n    tag: \"USD\",\n    value: \"\",\n    rate: 1,\n  });\n\n  const [currentValueRight, setRightValue] = useState<CurrentValue>({\n    tag: \"RUB\",\n    value: \"\",\n    rate: 1,\n  });\n\n  const [allRates, setRates] = useState<AllRates>({});\n\n  useEffect(() => {\n    getRates().then((result) => {\n      setRates(result);\n      setLeftValue((currentValueLeft) => ({\n        ...currentValueLeft,\n        rate: result[\"USD\"],\n      }));\n    });\n  }, []);\n\n  const handleChangelist = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const leftValue = { ...currentValueLeft };\n    const rightValue = { ...currentValueRight };\n    const {\n      target: { value: targetValue, name },\n    } = e;\n    const currentRate = allRates[e.target.value];\n    if (name === \"left\") {\n      rightValue.value = сalculating(\n        Number(leftValue.value),\n        currentRate,\n        rightValue.rate\n      );\n      changeListHelper(leftValue, currentRate, targetValue);\n    } else changeListHelper(rightValue, currentRate, targetValue, leftValue);\n    setStateHelper(rightValue, leftValue);\n  };\n\n  const handleChangeInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const {\n      target: { value: targetValue, name },\n    } = e;\n    if (digitChecking(targetValue) !== null) {\n      const leftValue = { ...currentValueLeft };\n      const rightValue = { ...currentValueRight };\n      if (name === \"left\")\n        changeInputHelper(rightValue, leftValue, targetValue);\n      else changeInputHelper(leftValue, rightValue, targetValue);\n      setStateHelper(rightValue, leftValue);\n    }\n  };\n\n  const setStateHelper: SetStateHelperFunc = (rightValue, leftValue) => {\n    setLeftValue(leftValue);\n    setRightValue(rightValue);\n  };\n\n  return (\n    <div className=\"mainBoard\">\n      <div>\n        <h3>Конвертер Валют</h3>\n        <SelectRow\n          allRates={allRates}\n          onChange={handleChangelist}\n          leftTag={currentValueLeft.tag}\n          rightTag={currentValueRight.tag}\n        />\n        <ExchangeRow\n          currentValueLeft={currentValueLeft}\n          currentValueRight={currentValueRight}\n          onChange={handleChangeInput}\n        />\n        <div className=\"flexRow\">\n          <a\n            href=\"#\"\n            onClick={() => setStateHelper(currentValueLeft, currentValueRight)}\n          >\n            Поменять местами\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}